@using System.Threading
@using SpotMe.Web.Components.Shared
@typeparam T
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@foreach (var item in _items)
{
    @ItemTemplate(item)
}
@if (_loading)
{
    @LoadingTemplate
}

<!-- Always render the indicator element so it's available for JS interop -->
<div @ref="_lastItemIndicator" style="height:1px;flex-shrink:0;width:100%;@(_enumerationCompleted ? "display:none;" : "")"></div>

@code {
    private List<T> _items = new();
    private ElementReference _lastItemIndicator;
    private DotNetObjectReference<InfiniteScrolling<T>> _currentComponentReference;
    private IJSObjectReference _module;
    private IJSObjectReference _instance;
    private bool _loading = false;
    private bool _enumerationCompleted = false;
    private CancellationTokenSource _loadItemsCts;

    [Parameter]
    public ItemsProviderRequestDelegate<T> ItemsProvider { get; set; }

    [Parameter]
    public RenderFragment<T> ItemTemplate { get; set; }

    [Parameter]
    public RenderFragment LoadingTemplate { get; set; }

    [JSInvokable]
    public async Task LoadMoreItems()
    {
        Console.WriteLine($"InfiniteScrolling.LoadMoreItems called, current item count: {_items.Count}");
        
        if (_loading)
        {
            Console.WriteLine("Already loading, skipping");
            return;
        }

        _loading = true;
        try
        {
            _loadItemsCts ??= new CancellationTokenSource();

            StateHasChanged(); // Allow the UI to display the loading indicator
            try
            {
                Console.WriteLine("Calling ItemsProvider");
                var newItems = await ItemsProvider(new InfiniteScrollingItemsProviderRequest(_items.Count, _loadItemsCts.Token));
                Console.WriteLine($"ItemsProvider returned {newItems.Count()} items");

                var previousCount = _items.Count;
                _items.AddRange(newItems);

                Console.WriteLine($"Added items, new count: {_items.Count}, previous count: {previousCount}");
                
                if (_items.Count == previousCount)
                {
                    _enumerationCompleted = true;
                    Console.WriteLine("No new items, enumeration completed");
                }
                else
                {
                    Console.WriteLine("Notifying JS of new items");
                    if (_instance != null)
                    {
                        await _instance.InvokeVoidAsync("onNewItems");
                    }
                }
            }
            catch (OperationCanceledException oce) when (oce.CancellationToken == _loadItemsCts.Token)
            {
                Console.WriteLine("Operation was canceled");
                // No-op; we canceled the operation, so it's fine to suppress this exception.
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error in LoadMoreItems: {ex.Message}");
            }
        }
        finally
        {
            _loading = false;
            Console.WriteLine("LoadMoreItems completed, loading = false");
        }

        StateHasChanged(); // Display the new items and hide the loading indicator
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"InfiniteScrolling.OnAfterRenderAsync called, firstRender: {firstRender}");
        
        // Initialize the IntersectionObserver
        if (firstRender)
        {
            try
            {
                Console.WriteLine("InfiniteScrolling - Initializing JS module");
                _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/js/infinite-scrolling.js");
                _currentComponentReference = DotNetObjectReference.Create(this);
                _instance = await _module.InvokeAsync<IJSObjectReference>("initialize", _lastItemIndicator, _currentComponentReference);
                Console.WriteLine("InfiniteScrolling - JS initialization complete");
                
                // Manually trigger the first load if no items are loaded yet
                if (_items.Count == 0 && !_loading)
                {
                    Console.WriteLine("InfiniteScrolling - Manually triggering first load");
                    await LoadMoreItems();
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error initializing infinite scrolling: {ex.Message}");
            }
        }
    }

    // Method to refresh the data - clears existing items and starts loading from the beginning
    public async Task RefreshDataAsync()
    {
        Console.WriteLine("InfiniteScrolling.RefreshDataAsync called");
        
        // Cancel any existing load operation
        if (_loadItemsCts != null)
        {
            _loadItemsCts.Cancel();
            _loadItemsCts.Dispose();
            _loadItemsCts = new CancellationTokenSource();
        }
        
        // Clear items and reset state
        _items.Clear();
        _enumerationCompleted = false;
        
        // Trigger UI update
        StateHasChanged();
        
        // Load the first batch
        Console.WriteLine("InfiniteScrolling - About to call LoadMoreItems");
        await LoadMoreItems();
        Console.WriteLine("InfiniteScrolling - LoadMoreItems completed");
    }

    public async ValueTask DisposeAsync()
    {
        // Cancel the current load items operation
        if (_loadItemsCts != null)
        {
            _loadItemsCts.Dispose();
            _loadItemsCts = null;
        }

        // Stop the IntersectionObserver
        if (_instance != null)
        {
            await _instance.InvokeVoidAsync("dispose");
            await _instance.DisposeAsync();
            _instance = null;
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }

        _currentComponentReference?.Dispose();
    }
}