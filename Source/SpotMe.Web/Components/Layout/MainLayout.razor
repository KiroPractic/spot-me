@inherits LayoutComponentBase
@using SpotMe.Web.Services
@using SpotMe.Web.Models
@using System.Diagnostics
@implements IDisposable
@inject IJSRuntime JSRuntime
@inject SpotifyAuthService AuthService
@inject NavigationManager NavigationManager

<div class="app-layout">
    @* Debug authentication status *@
    <div id="auth-debug-panel" style="position: fixed; top: 0; right: 0; background: rgba(0,0,0,0.7); color: white; padding: 5px; z-index: 9999; font-size: 12px;">
        Auth: @isAuthenticated, Profile: @(userProfile?.DisplayName ?? "none")
    </div>

    @if (isAuthenticated)
    {
        <!-- Inline styled navbar with ID for direct DOM access -->
        <div id="spotme-navbar" style="position: fixed; top: 0; left: 0; right: 0; height: 60px; background-color: #121212; color: #fff; display: flex; align-items: center; justify-content: space-between; padding: 0 20px; z-index: 1000; box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);">
            <!-- Brand -->
            <div style="display: flex; align-items: center; font-size: 1.5rem; font-weight: 700;">
                <i class="bi bi-spotify" style="color: #1DB954; font-size: 1.75rem; margin-right: 10px;"></i>
                <span>SpotMe</span>
            </div>
            
            <!-- Navigation Links -->
            <div style="display: flex; list-style: none; margin: 0; padding: 0;">
                <a href="/" style="display: flex; align-items: center; padding: 8px 12px; color: #fff; text-decoration: none; border-radius: 4px; margin: 0 5px;">
                    <i class="bi bi-house-door" style="margin-right: 8px;"></i>
                    <span>Home</span>
                </a>
                <a href="/search" style="display: flex; align-items: center; padding: 8px 12px; color: #b3b3b3; text-decoration: none; border-radius: 4px; margin: 0 5px;">
                    <i class="bi bi-search" style="margin-right: 8px;"></i>
                    <span>Search</span>
                </a>
                <a href="/playlists" style="display: flex; align-items: center; padding: 8px 12px; color: #b3b3b3; text-decoration: none; border-radius: 4px; margin: 0 5px;">
                    <i class="bi bi-music-note-list" style="margin-right: 8px;"></i>
                    <span>Playlists</span>
                </a>
            </div>
            
            <!-- User Section -->
            <div style="display: flex; align-items: center;">
                <div style="display: flex; align-items: center; margin-right: 15px;">
                    @if (!string.IsNullOrEmpty(userProfile?.ImageUrl))
                    {
                        <img src="@userProfile.ImageUrl" alt="@userProfile.DisplayName" style="width: 32px; height: 32px; border-radius: 50%; object-fit: cover; margin-right: 10px;" />
                    }
                    else
                    {
                        <i class="bi bi-person-circle" style="font-size: 24px; color: #b3b3b3; margin-right: 10px;"></i>
                    }
                    <span style="color: #fff; font-weight: 500;">@(userProfile?.DisplayName ?? "User")</span>
                </div>
                
                <button @onclick="HandleLogout" style="background-color: transparent; border: 1px solid #333; color: #b3b3b3; display: flex; align-items: center; padding: 6px 12px; border-radius: 4px; cursor: pointer;">
                    <i class="bi bi-box-arrow-right" style="margin-right: 6px;"></i>
                    <span>Logout</span>
                </button>
            </div>
        </div>
    }
    
    <main class="main-content @(isAuthenticated ? "with-navbar" : "")">
        @Body
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool isAuthenticated = false;
    private UserProfile? userProfile;

    // Listen for navigation events to check authentication on every navigation
    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        // Check auth status on every navigation
        await CheckAuthenticationStatus();
    }

    // Clean up event handler when component is disposed
    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
    
    // Static method that can be called from JavaScript
    [JSInvokable]
    public static Task ForceRefreshAuthStatus()
    {
        // This would need to be handled differently - this is just a placeholder
        Console.WriteLine("ForceRefreshAuthStatus called from JS");
        return Task.CompletedTask;
    }

    // Add an initialization method to check auth status early
    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationStatus();
    }
    
    private async Task CheckAuthenticationStatus(bool forceRefresh = false)
    {
        try
        {
            // Get the access token from the service
            var token = await AuthService.GetAccessTokenAsync();
            
            // Check if we have a valid token
            var wasAuthenticated = isAuthenticated;
            var newAuthState = !string.IsNullOrEmpty(token);
            
            // Set the authenticated state
            isAuthenticated = newAuthState;
            
            // Only update profile if authentication state changed or we don't have a profile yet or force refresh
            if (isAuthenticated && (wasAuthenticated != isAuthenticated || userProfile == null || forceRefresh))
            {
                // Fetch the user profile from Spotify
                var spotifyProfile = await AuthService.GetUserProfileAsync();
                
                if (spotifyProfile != null)
                {
                    // Extract display name, with fallback
                    string displayName = !string.IsNullOrEmpty(spotifyProfile.DisplayName) 
                        ? spotifyProfile.DisplayName 
                        : (!string.IsNullOrEmpty(spotifyProfile.Email) ? spotifyProfile.Email : "Spotify User");
                    
                    userProfile = new UserProfile
                    {
                        DisplayName = displayName,
                        Email = spotifyProfile.Email,
                        ImageUrl = spotifyProfile.Images?.FirstOrDefault()?.Url
                    };
                    
                    Console.WriteLine($"Fetched user profile: {displayName}");
                    
                    // Store the profile name in localStorage for our JavaScript fix to use
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "spotify_user_name", displayName);
                    
                    // Trigger our navbar fix after profile is loaded
                    await JSRuntime.InvokeVoidAsync("eval", "if (window.spotmeFix && window.spotmeFix.checkNavbar) { window.spotmeFix.checkNavbar(); }");
                }
                else
                {
                    // Fallback to default values
                    userProfile = new UserProfile
                    {
                        DisplayName = "Spotify User",
                        Email = "user@example.com"
                    };
                    
                    Console.WriteLine("Failed to get Spotify profile");
                    
                    // Store a fallback name for our JavaScript fix
                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", "spotify_user_name", "Spotify User");
                }
            }
            
            // Force a UI update since this might be called from an event handler
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error checking authentication: {ex.Message}");
            
            // Fallback to default values if needed
            userProfile = new UserProfile
            {
                DisplayName = "Spotify User",
                Email = "user@example.com"
            };
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            try
            {
                // JS code is now safe to run
                await JSRuntime.InvokeVoidAsync("console.log", "MainLayout first render - checking auth status directly");
                
                // DIRECT CHECK: Directly check localStorage for token without going through SpotifyAuthService
                try {
                    var directToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "spotify_access_token");
                    var directHasToken = !string.IsNullOrEmpty(directToken);
                    
                    await JSRuntime.InvokeVoidAsync("console.log", $"Direct localStorage check - token exists: {directHasToken}");
                    
                    if (directHasToken)
                    {
                        // We have a token, so we should be authenticated
                        isAuthenticated = true;
                        
                        // Force the UI to update to show the navbar
                        StateHasChanged();
                        
                        // Now also run the normal auth check to get the profile
                        await CheckAuthenticationStatus(true);
                    }
                }
                catch (Exception ex) {
                    await JSRuntime.InvokeVoidAsync("console.error", "Error in direct token check: " + ex.Message);
                }
                
                // Trigger our navbar fix JavaScript
                await JSRuntime.InvokeVoidAsync("eval", "if (window.spotmeFix && window.spotmeFix.checkNavbar) { window.spotmeFix.checkNavbar(); }");
                
                // Add Spotify SDK loading logic
                await JSRuntime.InvokeVoidAsync("eval", @"
                    // Define global namespace for SpotMe app
                    window.SpotMe = window.SpotMe || {};
                    
                    // Safe script loading function
                    window.SpotMe.loadSpotifySDK = function() {
                        console.log('Loading Spotify Web Playback SDK...');
                        if (!window.spotifyScriptLoaded) {
                            window.spotifyScriptLoaded = true;
                            return new Promise((resolve, reject) => {
                                const script = document.createElement('script');
                                script.src = 'https://sdk.scdn.co/spotify-player.js';
                                script.onload = () => {
                                    console.log('Spotify SDK loaded successfully');
                                    resolve();
                                };
                                script.onerror = (err) => {
                                    console.error('Failed to load Spotify SDK:', err);
                                    reject(err);
                                };
                                document.body.appendChild(script);
                            });
                        } else {
                            console.log('Spotify SDK already loaded');
                            return Promise.resolve();
                        }
                    };
                    
                    // Only try to load if we're on a page that needs it
                    if (window.location.pathname === '/player') {
                        window.SpotMe.loadSpotifySDK();
                    }
                ");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error in MainLayout: {ex.Message}");
            }
        }
    }
    
    private string GetActiveClass(string path)
    {
        var currentPath = NavigationManager.Uri.Split('?')[0];
        if (path == "/" && currentPath.EndsWith("/"))
            return "active";
            
        return currentPath.Contains(path) ? "active" : "";
    }
    
    private async Task HandleLogout()
    {
        await AuthService.ClearAccessTokenAsync();
        isAuthenticated = false;
        StateHasChanged();
        
        // Navigate to login page
        NavigationManager.NavigateTo("/auth");
    }
    
    // UserProfile model is now defined in SpotMe.Web.Models namespace
}
