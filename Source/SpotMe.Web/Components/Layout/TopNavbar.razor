@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using SpotMe.Web.Services
@implements IDisposable
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserAuthenticationService AuthService
@rendermode InteractiveServer

<div class="top-navbar">
    <div class="navbar-brand">
        <i class="bi bi-spotify spotify-icon"></i>
        <span>SpotMe</span>
    </div>
    
    <div class="nav-links">
        <a href="/" class="@GetActiveClass("/")">
            <i class="bi bi-house-door"></i>
            <span>Home</span>
        </a>
        
        @if (_isAuthenticated)
        {
            <a href="/instructions" class="@GetActiveClass("/instructions")">
                <i class="bi bi-info-circle"></i>
                <span>Instructions</span>
            </a>
            <a href="/userdata" class="@GetActiveClass("/userdata")">
                <i class="bi bi-file-earmark-arrow-up"></i>
                <span>Upload Data</span>
            </a>
            <a href="/stats" class="@GetActiveClass("/stats")">
                <i class="bi bi-graph-up"></i>
                <span>Stats</span>
            </a>
            <a href="/playlists" class="@GetActiveClass("/playlists")">
                <i class="bi bi-music-note-list"></i>
                <span>Playlists</span>
            </a>
        }
        else
        {
            <a href="/about" class="@GetActiveClass("/about")">
                <i class="bi bi-info-circle"></i>
                <span>About</span>
            </a>
        }
    </div>
    
    <div class="user-section">
        @if (_isAuthenticated)
        {
            <div class="user-profile">
                <i class="bi bi-person-circle profile-icon"></i>
                <span class="username">@GetCurrentUsername()</span>
            </div>
            
            <button @onclick="LogoutAsync" class="logout-btn">
                <i class="bi bi-box-arrow-right"></i>
                <span>Logout</span>
            </button>
        }
        else
        {
            <div class="auth-buttons">
                <a href="/login" class="btn btn-outline-primary btn-sm me-2">
                    <i class="bi bi-box-arrow-in-right me-1"></i>
                    Sign In
                </a>
                <a href="/register" class="btn btn-primary btn-sm">
                    <i class="bi bi-person-plus me-1"></i>
                    Register
                </a>
            </div>
        }
    </div>
</div>

<style>
    .top-navbar {
        background-color: #121212;
        border-bottom: 1px solid #282828;
        color: #ffffff;
        padding: 0.75rem 1.5rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        position: sticky;
        top: 0;
        z-index: 1000;
    }

    .navbar-brand {
        display: flex;
        align-items: center;
        font-weight: bold;
        font-size: 1.25rem;
        text-decoration: none;
        color: #ffffff;
    }

    .spotify-icon {
        font-size: 1.5rem;
        margin-right: 0.5rem;
        color: #1db954;
    }

    .nav-links {
        display: flex;
        gap: 1.5rem;
        align-items: center;
    }

    .nav-links a {
        color: #b3b3b3;
        text-decoration: none;
        display: flex;
        align-items: center;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        transition: all 0.2s ease;
        font-weight: 500;
    }

    .nav-links a:hover {
        color: #ffffff;
        background: rgba(255, 255, 255, 0.1);
    }

    .nav-links a.active {
        color: #ffffff;
        background: rgba(29, 185, 84, 0.2);
    }

    .nav-links a i {
        margin-right: 0.5rem;
        font-size: 1.1rem;
    }

    .user-section {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .user-profile {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #ffffff;
    }

    .profile-icon {
        font-size: 1.5rem;
        color: #b3b3b3;
    }

    .username {
        font-weight: 500;
        font-size: 0.9rem;
        color: #ffffff;
    }

    .logout-btn {
        background: transparent;
        border: 1px solid #1db954;
        color: #1db954;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        text-decoration: none;
        display: flex;
        align-items: center;
        transition: all 0.2s ease;
        font-size: 0.9rem;
        cursor: pointer;
    }

    .logout-btn:hover {
        background: rgba(29, 185, 84, 0.1);
        color: #1ed760;
    }

    .logout-btn i {
        margin-right: 0.5rem;
    }

    .auth-buttons {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-sm {
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
        border-radius: 50px;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        transition: all 0.2s ease;
        font-weight: 600;
    }

    .btn-outline-primary {
        background: transparent;
        border: 1px solid #1db954;
        color: #1db954;
    }

    .btn-outline-primary:hover {
        background: rgba(29, 185, 84, 0.1);
        color: #1ed760;
    }

    .btn-primary {
        background: #1db954;
        border: 1px solid #1db954;
        color: #ffffff;
    }

    .btn-primary:hover {
        background: #1ed760;
        border-color: #1ed760;
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(29, 185, 84, 0.3);
    }

    @@media (max-width: 768px) {
        .top-navbar {
            padding: 0.5rem 1rem;
            flex-wrap: wrap;
        }

        .nav-links {
            gap: 1rem;
        }

        .nav-links a span {
            display: none;
        }

        .nav-links a {
            padding: 0.5rem;
        }

        .username {
            display: none;
        }

        .logout-btn span {
            display: none;
        }

        .auth-buttons .btn-sm {
            padding: 0.4rem 0.8rem;
            font-size: 0.8rem;
        }
    }

    @@media (max-width: 576px) {
        .nav-links {
            order: 3;
            width: 100%;
            justify-content: center;
            margin-top: 0.5rem;
        }
    }
</style>

@code {
    private bool _isAuthenticated;
    private string? _userEmail;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await CheckAuthenticationStatus();
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationStatus();
    }
    
    private async Task CheckAuthenticationStatus()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            _isAuthenticated = authState.User.Identity?.IsAuthenticated == true;
            
            if (_isAuthenticated)
            {
                _userEmail = authState.User.FindFirst(ClaimTypes.Email)?.Value;
            }
            else
            {
                _userEmail = null;
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("console.error", $"Error checking authentication: {ex.Message}");
            _isAuthenticated = false;
            _userEmail = null;
        }
    }
    
    private string GetActiveClass(string path)
    {
        var currentUri = NavigationManager.Uri;
        if (path == "/" && currentUri.EndsWith("/"))
            return "active";
            
        return currentUri.Contains(path) ? "active" : "";
    }
    
    private string GetCurrentUsername()
    {
        return !string.IsNullOrEmpty(_userEmail) ? _userEmail : "User";
    }
    
    private async Task LogoutAsync()
    {
        try
        {
            await AuthService.SignOutUserAsync();
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("console.error", $"Logout error: {ex.Message}");
        }
    }
}