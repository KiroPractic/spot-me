@page "/userdata"
@using SpotMe.Web.Services
@using SpotMe.Web.Models
@inject UserDataService UserDataService
@inject StatsService StatsService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>My Spotify Data - SpotMe</PageTitle>

<div class="container user-data-container">
    <div class="row">
        <div class="col-12">
            <h1>My Spotify Data</h1>
            <p class="text-muted">Upload and manage your Spotify streaming history JSON files</p>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger">
            <strong>Error:</strong> @_errorMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <div class="alert alert-success">
            <strong>Success:</strong> @_successMessage
        </div>
    }

    <!-- Upload Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Upload New Data Files</h5>
                    <p class="card-text">Upload your Spotify streaming history JSON files downloaded from Spotify.</p>
                    
                    <div class="mb-3">
                        <label for="fileInput" class="form-label">Select JSON Files</label>
                        <InputFile id="fileInput" class="form-control" multiple OnChange="OnFilesSelected" accept=".json" />
                        <div class="form-text">You can select multiple JSON files at once. Only .json files are accepted.</div>
                    </div>

                    @if (_selectedFiles?.Any() == true)
                    {
                        <div class="mb-3">
                            <h6>Selected Files:</h6>
                            <ul class="list-group list-group-flush">
                                @foreach (var file in _selectedFiles)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @file.Name
                                        <span class="badge bg-secondary rounded-pill">@FormatFileSize(file.Size)</span>
                                    </li>
                                }
                            </ul>
                        </div>
                    }

                    <button class="btn btn-primary" @onclick="UploadFiles" disabled="@(_isUploading || _selectedFiles?.Any() != true)">
                        @if (_isUploading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            <span>Uploading...</span>
                        }
                        else
                        {
                            <i class="fas fa-upload me-2"></i>
                            <span>Upload Files</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Storage Stats -->
    @if (_storageStats != null)
    {
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card stat-card">
                    <div class="card-body text-center">
                        <h6 class="card-title">Total Files</h6>
                        <p class="card-text h4">@_storageStats.TotalFiles</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card stat-card">
                    <div class="card-body text-center">
                        <h6 class="card-title">Total Size</h6>
                        <p class="card-text h4">@_storageStats.TotalSizeFormatted</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card stat-card">
                    <div class="card-body text-center">
                        <h6 class="card-title">Total Entries</h6>
                        <p class="card-text h4">@_storageStats.TotalEntries.ToString("N0")</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card stat-card">
                    <div class="card-body text-center">
                        <h6 class="card-title">Average per File</h6>
                        <p class="card-text h4">@(_storageStats.TotalFiles > 0 ? (_storageStats.TotalEntries / _storageStats.TotalFiles).ToString("N0") : "0")</p>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Files List -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0">Uploaded Files</h5>
                        <button class="btn btn-outline-secondary btn-sm" @onclick="LoadUserFiles">
                            <i class="fas fa-refresh me-2"></i>Refresh
                        </button>
                    </div>

                    @if (_isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (_userFiles?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-dark table-striped">
                                <thead>
                                    <tr>
                                        <th>File Name</th>
                                        <th>File Size</th>
                                        <th>Entries</th>
                                        <th>Uploaded</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var file in _userFiles)
                                    {
                                        <tr>
                                            <td>@file.FileName</td>
                                            <td>@file.FileSizeFormatted</td>
                                            <td>@file.EntryCount.ToString("N0")</td>
                                            <td>@file.UploadedAt.ToString("yyyy-MM-dd HH:mm")</td>
                                            <td>
                                                <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteFile(file.FileName)" title="Delete file">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="fas fa-file-alt fa-3x text-muted mb-3"></i>
                            <p class="text-muted">No files uploaded yet. Upload your Spotify streaming history JSON files to get started.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Instructions -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">How to get your Spotify data</h5>
                    <ol>
                        <li>Go to <a href="https://www.spotify.com/privacy" target="_blank" class="text-primary">Spotify Privacy Settings</a></li>
                        <li>Log in to your Spotify account</li>
                        <li>Scroll down to "Download your data" and click "Request"</li>
                        <li>Select "Extended streaming history" and submit your request</li>
                        <li>Wait for Spotify to prepare your data (can take up to 30 days)</li>
                        <li>Download the ZIP file and extract the JSON files</li>
                        <li>Upload the JSON files here to see your detailed statistics</li>
                    </ol>
                    <div class="alert alert-info">
                        <strong>Note:</strong> The extended streaming history includes much more detail than the basic data and is required for full functionality.
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<IBrowserFile>? _selectedFiles;
    private List<UserDataFile>? _userFiles;
    private UserStorageStats? _storageStats;
    private bool _isLoading = true;
    private bool _isUploading = false;
    private string? _errorMessage;
    private string? _successMessage;
    
    // For demo purposes, using a hardcoded user ID
    // In a real app, this would come from authentication
    private readonly string _currentUserId = "demo-user";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserFiles();
    }

    private async Task LoadUserFiles()
    {
        _isLoading = true;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            _userFiles = await UserDataService.GetUserFilesAsync(_currentUserId);
            _storageStats = await UserDataService.GetUserStorageStatsAsync(_currentUserId);
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error loading files: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void OnFilesSelected(InputFileChangeEventArgs e)
    {
        _selectedFiles = e.GetMultipleFiles().ToList();
        _errorMessage = null;
        _successMessage = null;
        StateHasChanged();
    }

    private async Task UploadFiles()
    {
        if (_selectedFiles?.Any() != true) return;

        _isUploading = true;
        _errorMessage = null;
        _successMessage = null;
        StateHasChanged();

        try
        {
            foreach (var file in _selectedFiles)
            {
                await UserDataService.SaveSpotifyDataFileAsync(_currentUserId, file);
            }

            // Clear user cache so new data is loaded
            StatsService.ClearUserCache(_currentUserId);

            _successMessage = $"Successfully uploaded {_selectedFiles.Count} file(s)";
            _selectedFiles = null;
            
            // Reload the files list
            await LoadUserFiles();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error uploading files: {ex.Message}";
        }
        finally
        {
            _isUploading = false;
            StateHasChanged();
        }
    }

    private async Task DeleteFile(string fileName)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{fileName}'?");
        if (!confirmed) return;

        try
        {
            await UserDataService.DeleteUserFileAsync(_currentUserId, fileName);
            
            // Clear user cache
            StatsService.ClearUserCache(_currentUserId);
            
            _successMessage = $"File '{fileName}' deleted successfully";
            
            // Reload the files list
            await LoadUserFiles();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error deleting file: {ex.Message}";
            StateHasChanged();
        }
    }

    private static string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
} 