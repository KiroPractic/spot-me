@page "/register"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Authorization
@using SpotMe.Web.Services
@inject UserAuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>SpotMe - Register</PageTitle>

<div class="register-container">
    <div class="register-card">
        <div class="text-center mb-4">
            <h1 class="h3 mb-3 fw-normal">Create Your SpotMe Account</h1>
            <p>Join us to unlock your Spotify insights</p>
        </div>

        <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister" class="register-form">
            <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary class="alert alert-danger" />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success">@successMessage</div>
            }

            <div class="mb-3">
                <label for="email" class="form-label">Email address</label>
                <InputText @bind-Value="registerModel.Email" 
                          class="form-control" 
                          id="email" 
                          placeholder="Enter your email" 
                          autocomplete="email" />
                <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <div class="password-input-container">
                    <InputText @bind-Value="registerModel.Password" 
                              type="password" 
                              class="form-control" 
                              id="password" 
                              placeholder="Enter your password" 
                              autocomplete="new-password"
                              @oninput="OnPasswordChanged" />
                    <button type="button" class="password-toggle-btn" onclick="togglePasswordVisibility('password')">
                        <i class="bi bi-eye" id="password-eye"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
            </div>

            <div class="mb-4">
                <label for="confirmPassword" class="form-label">Confirm Password</label>
                <div class="password-input-container">
                    <InputText @bind-Value="registerModel.ConfirmPassword" 
                              type="password" 
                              class="form-control" 
                              id="confirmPassword" 
                              placeholder="Confirm your password" 
                              autocomplete="new-password" />
                    <button type="button" class="password-toggle-btn" onclick="togglePasswordVisibility('confirmPassword')">
                        <i class="bi bi-eye-slash" id="confirmPassword-eye"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-danger" />
            </div>

            <!-- Password Requirements -->
            <div class="password-requirements mb-4">
                <p class="mb-2"><small>Password must contain:</small></p>
                <div class="requirements-grid">
                    <div class="requirement @(hasMinLength ? "valid" : "")">
                        <i class="bi @(hasMinLength ? "bi-check-circle-fill" : "bi-circle")"></i>
                        <span>At least 8 characters</span>
                    </div>
                    <div class="requirement @(hasUppercase ? "valid" : "")">
                        <i class="bi @(hasUppercase ? "bi-check-circle-fill" : "bi-circle")"></i>
                        <span>One uppercase letter</span>
                    </div>
                    <div class="requirement @(hasLowercase ? "valid" : "")">
                        <i class="bi @(hasLowercase ? "bi-check-circle-fill" : "bi-circle")"></i>
                        <span>One lowercase letter</span>
                    </div>
                    <div class="requirement @(hasDigit ? "valid" : "")">
                        <i class="bi @(hasDigit ? "bi-check-circle-fill" : "bi-circle")"></i>
                        <span>One number</span>
                    </div>
                    <div class="requirement @(hasSpecialChar ? "valid" : "")">
                        <i class="bi @(hasSpecialChar ? "bi-check-circle-fill" : "bi-circle")"></i>
                        <span>One special character</span>
                    </div>
                </div>
            </div>

            <button type="submit" class="btn btn-primary w-100 mb-3" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Creating account...</span>
                }
                else
                {
                    <span>Create Account</span>
                }
            </button>
        </EditForm>

        <div class="text-center">
            <p>
                Already have an account? 
                <a href="/login" class="text-decoration-none">Sign in here</a>
            </p>
        </div>
    </div>
</div>

<style>
    .register-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #121212 0%, #1E1E1E 100%);
        padding: 2rem 1rem;
    }

    .register-card {
        background: rgba(0, 0, 0, 0.3);
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
        padding: 3rem;
        width: 100%;
        max-width: 450px;
        border: 1px solid #282828;
    }

    .register-card h1 {
        color: #1DB954;
    }

    .register-card p {
        color: #b3b3b3;
    }

    .form-label {
        color: #ffffff;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .form-control {
        background-color: #282828 !important;
        border: 1px solid #404040;
        color: #ffffff !important;
        padding: 12px 16px;
        border-radius: 8px;
    }

    .form-control::placeholder {
        color: #b3b3b3;
    }

    .form-control:focus {
        background-color: #282828 !important;
        border-color: #1DB954;
        color: #ffffff !important;
        box-shadow: 0 0 0 0.2rem rgba(29, 185, 84, 0.25);
    }

    .btn-primary {
        background-color: #1DB954;
        border: none;
        padding: 12px;
        font-weight: 600;
        letter-spacing: 0.5px;
        border-radius: 50px;
    }

    .btn-primary:hover {
        background-color: #1ed760;
        transform: translateY(-1px);
        box-shadow: 0 5px 15px rgba(29, 185, 84, 0.3);
    }

    .password-requirements {
        background: #282828;
        border-radius: 8px;
        padding: 1rem;
        border: 1px solid #404040;
    }

    .password-requirements p {
        color: #b3b3b3;
    }

    .requirements-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 0.75rem;
    }

    .requirement {
        display: flex;
        align-items: center;
        font-size: 0.875rem;
        color: #b3b3b3;
        transition: color 0.2s ease;
    }

    .requirement.valid {
        color: #1DB954;
    }

    .requirement i {
        margin-right: 0.5rem;
        font-size: 1rem;
    }

    .requirement.valid i {
        color: #1DB954;
    }

    .text-center a {
        color: #1DB954;
        text-decoration: none;
    }

    .text-center a:hover {
        color: #1ed760;
        text-decoration: underline;
    }

    .alert-danger {
        background-color: rgba(220, 53, 69, 0.1) !important;
        border: 1px solid rgba(220, 53, 69, 0.3) !important;
        color: #f8d7da !important;
        border-radius: 8px;
    }

    .alert-success {
        background-color: rgba(29, 185, 84, 0.1) !important;
        border: 1px solid rgba(29, 185, 84, 0.3) !important;
        color: #d1f2dd !important;
        border-radius: 8px;
    }

    .password-input-container {
        position: relative;
    }

    .password-toggle-btn {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #b3b3b3;
        cursor: pointer;
        padding: 0;
        font-size: 1.1rem;
        z-index: 10;
    }

    .password-toggle-btn:hover {
        color: #1DB954;
    }

    @@media (max-width: 576px) {
        .register-card {
            padding: 2rem;
        }
    }
</style>

@code {
    private RegisterModel registerModel = new();
    private string? errorMessage;
    private string? successMessage;
    private bool isLoading = false;

    // Password validation flags
    private bool hasMinLength = false;
    private bool hasUppercase = false;
    private bool hasLowercase = false;
    private bool hasDigit = false;
    private bool hasSpecialChar = false;

    public class RegisterModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/instructions");
        }
    }

    private void OnPasswordChanged(ChangeEventArgs e)
    {
        var password = e.Value?.ToString() ?? "";
        registerModel.Password = password;
        
        // Update password requirement flags
        hasMinLength = password.Length >= 8;
        hasUppercase = System.Text.RegularExpressions.Regex.IsMatch(password, @"[A-Z]");
        hasLowercase = System.Text.RegularExpressions.Regex.IsMatch(password, @"[a-z]");
        hasDigit = System.Text.RegularExpressions.Regex.IsMatch(password, @"\d");
        hasSpecialChar = System.Text.RegularExpressions.Regex.IsMatch(password, @"[!@#$%^&*()_+\-=\[\]{};':""\\|,.<>\/?]");
        
        StateHasChanged();
    }

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;
        StateHasChanged();

        try
        {
            var result = await AuthService.RegisterAndSignInUserAsync(registerModel.Email, registerModel.Password);

            if (result.Success)
            {
                // Show success message briefly, then redirect
                successMessage = "Account created successfully! Redirecting...";
                StateHasChanged();
                
                await Task.Delay(1500);
                Navigation.NavigateTo("/instructions", forceLoad: true);
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during registration. Please try again.";
            await JSRuntime.InvokeVoidAsync("console.error", $"Registration error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

<script>
    function togglePasswordVisibility(inputId) {
        const passwordInput = document.getElementById(inputId);
        const eyeIcon = document.getElementById(inputId + '-eye');
        
        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            eyeIcon.className = 'bi bi-eye-slash';
        } else {
            passwordInput.type = 'password';
            eyeIcon.className = 'bi bi-eye';
        }
    }
</script> 