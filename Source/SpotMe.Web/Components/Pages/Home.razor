@page "/"
@using SpotMe.Web.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject SpotifyAuthService AuthService
@rendermode InteractiveServer

<PageTitle>SpotMe - Spotify Player</PageTitle>

<div class="dark-container">
    <div class="spotify-content">
        <h1>SpotMe</h1>
        <p class="tagline">Your personal Spotify player experience</p>
        
        @if (isAuthenticated)
        {
            <div class="authentication-success">
                <p class="mb-3"><i class="bi bi-check-circle-fill text-success"></i> Connected to Spotify</p>
                <button @onclick="LogoutFromSpotify" class="spotify-button spotify-button-secondary">
                    <i class="bi bi-box-arrow-right"></i> Disconnect
                </button>
            </div>
        }
        else
        {
            <button @onclick="AuthenticateWithSpotify" class="spotify-button">
                <i class="bi bi-spotify"></i> Connect with Spotify
            </button>
        }
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }
    </div>
</div>

@code {
    private string? errorMessage;
    private bool isAuthenticated = false;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try 
            {
                // Check if user is already authenticated
                var token = await AuthService.GetAccessTokenAsync();
                isAuthenticated = !string.IsNullOrEmpty(token);
                
                await JSRuntime.InvokeVoidAsync("console.log", $"User is authenticated: {isAuthenticated}");
                
                // Since we're changing state, we need to call StateHasChanged
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.error", $"Error checking authentication: {ex.Message}");
                errorMessage = $"Error: {ex.Message}";
                StateHasChanged();
            }
        }
    }
    
    private async Task AuthenticateWithSpotify()
    {
        try
        {
            // Log that we're starting authentication
            await JSRuntime.InvokeVoidAsync("console.log", "Starting Spotify authentication...");
            
            // Configure the auth service with your client ID and redirect URI
            var redirectUri = NavigationManager.BaseUri.TrimEnd('/') + "/callback";
            await JSRuntime.InvokeVoidAsync("console.log", $"Using redirect URI: {redirectUri}");
            AuthService.Configure("6bf1083c60b743a9841b7db2ca63117b", redirectUri);
            
            // Generate the auth URL and redirect
            var authUrl = await AuthService.GenerateAuthUrlAsync();
            
            // Log the URL we're navigating to
            await JSRuntime.InvokeVoidAsync("console.log", $"Navigating to auth URL: {authUrl}");
            
            // Use a safe redirect approach
            await JSRuntime.InvokeVoidAsync("eval", $"setTimeout(function() {{ window.location.href = '{authUrl.Replace("'", "\\'")}'; }}, 100);");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Authentication error: {ex.Message}");
            errorMessage = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private async Task LogoutFromSpotify()
    {
        try
        {
            await AuthService.ClearAccessTokenAsync();
            isAuthenticated = false;
            StateHasChanged();
            
            await JSRuntime.InvokeVoidAsync("console.log", "User logged out from Spotify");
        }
        catch (Exception ex)
        {
            errorMessage = $"Logout error: {ex.Message}";
            StateHasChanged();
        }
    }
}
