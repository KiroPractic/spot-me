@page "/"
@using SpotMe.Web.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject SpotifyAuthService AuthService

<PageTitle>SpotMe - Spotify Player</PageTitle>

<div class="dark-container">
    <div class="spotify-content">
        <h1>SpotMe</h1>
        <p class="tagline">Your personal Spotify player experience</p>
        
        <button @onclick="AuthenticateWithSpotify" class="spotify-button">
            <i class="bi bi-spotify"></i> Connect with Spotify
        </button>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }
    </div>
</div>

@code {
    private string? errorMessage;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && NavigationManager.Uri.Contains("#access_token="))
        {
            // Handle redirect from Spotify
            await HandleAuthRedirect();
        }
    }
    
    private async Task AuthenticateWithSpotify()
    {
        try
        {
            // Log that we're starting authentication
            await JSRuntime.InvokeVoidAsync("console.log", "Starting Spotify authentication...");
            
            // Configure the auth service with your client ID and redirect URI
            var redirectUri = NavigationManager.BaseUri.TrimEnd('/');
            AuthService.Configure("6bf1083c60b743a9841b7db2ca63117b", redirectUri);
            
            // Generate the auth URL and redirect
            var authUrl = await AuthService.GenerateAuthUrlAsync();
            
            // Log the URL we're navigating to
            await JSRuntime.InvokeVoidAsync("console.log", $"Navigating to auth URL: {authUrl}");
            
            // Use a safe redirect approach
            await JSRuntime.InvokeVoidAsync("eval", $"setTimeout(function() {{ window.location.href = '{authUrl.Replace("'", "\\'")}'; }}, 100);");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Authentication error: {ex.Message}");
            errorMessage = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }
    
    private async Task HandleAuthRedirect()
    {
        try
        {
            if (await AuthService.HandleRedirectAsync())
            {
                // Successfully authenticated, redirect to player page
                NavigationManager.NavigateTo("/player");
            }
            else
            {
                errorMessage = "Failed to authenticate with Spotify";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Authentication error: {ex.Message}";
            StateHasChanged();
        }
    }
}
