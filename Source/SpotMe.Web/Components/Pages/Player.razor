@page "/player"
@page "/spotify-player"
@using SpotMe.Web.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject SpotifyAuthService AuthService
@inject IHttpClientFactory HttpClientFactory

<PageTitle>SpotMe - Player</PageTitle>

<div class="dark-container">
    <div class="player-container">
        <div class="player-header">
            <h1>SpotMe Player</h1>
            <button @onclick="Logout" class="logout-button">
                <i class="bi bi-box-arrow-right"></i> Disconnect
            </button>
        </div>
        
        @if (profile != null)
        {
            <div class="profile-section">
                <div class="profile-header">
                    @if (!string.IsNullOrEmpty(profileImageUrl))
                    {
                        <img src="@profileImageUrl" alt="Profile" class="profile-image" />
                    }
                    else
                    {
                        <div class="profile-placeholder">
                            <i class="bi bi-person-circle"></i>
                        </div>
                    }
                    <div class="profile-info">
                        <h2>@(profile.DisplayName ?? "Spotify User")</h2>
                        <p>@(profile.Email ?? "")</p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="loading">
                <p>Loading profile...</p>
            </div>
        }
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">@errorMessage</div>
        }
    </div>
</div>

@code {
    private string? errorMessage;
    private SpotifyUserProfile? profile;
    private string? profileImageUrl;
    private string? accessToken;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Check if we have a valid token
            accessToken = await AuthService.GetAccessTokenAsync();
            if (string.IsNullOrEmpty(accessToken))
            {
                // Not authenticated, redirect back to home
                NavigationManager.NavigateTo("/");
                return;
            }
            
            await FetchUserProfile();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
            errorMessage = "An error occurred during initialization.";
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Initialize our JS interop for Spotify
                await JSRuntime.InvokeVoidAsync("eval", @"
                    // Ensure SpotMe namespace exists
                    window.SpotMe = window.SpotMe || {};
                    
                    // Setup error handler for all async operations
                    window.addEventListener('error', function(event) {
                        console.error('Global error caught:', event.error);
                    });
                    
                    // Safe wrapper for the Spotify SDK
                    window.SpotMe.initSpotify = function() {
                        console.log('Initializing Spotify player...');
                        
                        // Only proceed if SDK is loaded
                        if (typeof Spotify !== 'undefined') {
                            console.log('Spotify SDK is available');
                        } else {
                            console.log('Waiting for Spotify SDK...');
                            if (typeof window.SpotMe.loadSpotifySDK === 'function') {
                                window.SpotMe.loadSpotifySDK();
                            }
                        }
                    };
                    
                    // Initialize when ready
                    window.SpotMe.initSpotify();
                ");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error in JS initialization: {ex.Message}");
            }
        }
    }
    
    private async Task FetchUserProfile()
    {
        try
        {
            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Add("Authorization", $"Bearer {accessToken}");
            
            var response = await client.GetAsync("https://api.spotify.com/v1/me");
            response.EnsureSuccessStatusCode();
            
            var content = await response.Content.ReadAsStringAsync();
            profile = await System.Text.Json.JsonSerializer.DeserializeAsync<SpotifyUserProfile>(
                new System.IO.MemoryStream(System.Text.Encoding.UTF8.GetBytes(content)),
                new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            
            if (profile?.Images?.Any() == true)
            {
                profileImageUrl = profile.Images.First().Url;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching profile: {ex.Message}";
        }
    }
    
    private async Task Logout()
    {
        await AuthService.ClearAccessTokenAsync();
        NavigationManager.NavigateTo("/");
    }
}