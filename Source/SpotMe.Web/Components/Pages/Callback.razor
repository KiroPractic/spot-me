@page "/callback"
@using SpotMe.Web.Services
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject SpotifyAuthService AuthService
@rendermode InteractiveServer

<PageTitle>Authenticating with Spotify...</PageTitle>

<div class="dark-container">
    <div class="spotify-content text-center">
        <h1>Authenticating...</h1>
        <p>Please wait while we complete the authentication process.</p>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                @errorMessage
                <a href="/" class="spotify-button mt-3">
                    <i class="bi bi-house"></i> Return Home
                </a>
            </div>
        }
    </div>
</div>

@code {
    private string? errorMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try 
            {
                await HandleAuthRedirect();
            }
            catch (InvalidOperationException ex) when (ex.Message.Contains("JavaScript interop"))
            {
                // This can happen during prerendering
                Console.Error.WriteLine("JS interop error during prerendering. Will retry after render.");
                
                // Queue a state change to force a re-render
                errorMessage = "Completing authentication...";
                StateHasChanged();
            }
        }
    }

    private async Task HandleAuthRedirect()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "Starting Callback.HandleAuthRedirect");
            await JSRuntime.InvokeVoidAsync("console.log", $"Current URL: {NavigationManager.Uri}");
            
            // Get the URL fragment directly through JavaScript
            var fragment = await JSRuntime.InvokeAsync<string>("eval", "window.location.hash");
            await JSRuntime.InvokeVoidAsync("console.log", $"Fragment: {fragment}");
            
            if (string.IsNullOrEmpty(fragment) || !fragment.StartsWith("#"))
            {
                await JSRuntime.InvokeVoidAsync("console.log", "No fragment found in URL");
                errorMessage = "No authentication data received from Spotify";
                StateHasChanged();
                return;
            }
            
            // Parse the fragment
            var fragmentParams = new Dictionary<string, string>();
            var pairs = fragment.Substring(1).Split('&');
            
            foreach (var pair in pairs)
            {
                var keyValue = pair.Split('=', 2);
                if (keyValue.Length == 2)
                {
                    var key = keyValue[0];
                    var value = System.Web.HttpUtility.UrlDecode(keyValue[1]);
                    fragmentParams[key] = value;
                    await JSRuntime.InvokeVoidAsync("console.log", $"Param: {key} = {value}");
                }
            }
            
            if (fragmentParams.TryGetValue("access_token", out var accessToken))
            {
                await JSRuntime.InvokeVoidAsync("console.log", $"Access token received: {accessToken.Substring(0, Math.Min(10, accessToken.Length))}...");
                
                if (fragmentParams.TryGetValue("expires_in", out var expiresInStr) && int.TryParse(expiresInStr, out var expiresIn))
                {
                    // Store token in the service
                    await AuthService.StoreAccessTokenAsync(accessToken, expiresIn);
                    
                    // Clear the fragment
                    await JSRuntime.InvokeVoidAsync("history.replaceState", null, "", "/callback");
                    
                    // Successfully authenticated, redirect to home page
                    await JSRuntime.InvokeVoidAsync("console.log", "Authentication successful, redirecting to home page");
                    NavigationManager.NavigateTo("/");
                    return;
                }
            }
            
            await JSRuntime.InvokeVoidAsync("console.log", "Authentication failed - couldn't extract token");
            errorMessage = "Failed to authenticate with Spotify - missing token data";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error in HandleAuthRedirect: {ex.Message}");
            errorMessage = $"Authentication error: {ex.Message}";
            StateHasChanged();
        }
    }
}