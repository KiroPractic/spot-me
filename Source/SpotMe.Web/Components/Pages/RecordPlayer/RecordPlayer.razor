@page "/record-player"
@using SpotMe.Web.Services
@inject IJSRuntime JsRuntime
@inject SpotifyService SpotifyService
@inject NavigationManager NavigationManager
@implements IDisposable
@rendermode InteractiveServer

<div class="record-player-page">
    @if (!_isAuthenticated)
    {
        <div class="auth-message">
            <p>Please login with Spotify to use the Record Player</p>
            <button @onclick="AuthenticateWithSpotify" class="spotify-login-button">
                <i class="bi bi-spotify"></i>
                Sign in with Spotify
            </button>
        </div>
    }
    else
    {
        <div class="turntable">
            <div class="turntable-platter">
                <div class="vinyl @(_isPlaying ? "spin" : "")">
                    <div class="vinyl-grooves"></div>
                    <div class="vinyl-label">
                        @if (!string.IsNullOrEmpty(_currentTrackImageUrl))
                        {
                            <img src="@_currentTrackImageUrl" alt="Album Cover"/>
                        }
                        else
                        {
                            <div class="vinyl-label-placeholder">
                                <i class="bi bi-music-note"></i>
                            </div>
                        }
                    </div>
                </div>

                <div class="tonearm @(_isPlaying ? "playing" : "")">
                    <div class="tonearm-base"></div>
                    <div class="tonearm-arm"></div>
                    <div class="tonearm-head"></div>
                </div>
            </div>

            <div class="player-controls">
                <div class="track-info">
                    <div class="track-name">@_currentTrackName</div>
                    <div class="track-artist">@_currentTrackArtist</div>
                </div>

                <div class="playback-controls">
                    <button class="control-btn" @onclick="PreviousTrack" disabled="@(!_isPlayerReady || !_isPlaying)">
                        <i class="bi bi-skip-backward-fill"></i>
                    </button>

                    <button class="play-button" @onclick="TogglePlayback">
                        @if (_isPlaying)
                        {
                            <i class="bi bi-pause-circle-fill"></i>
                        }
                        else
                        {
                            <i class="bi bi-play-circle-fill"></i>
                        }
                    </button>

                    <button class="control-btn" @onclick="NextTrack" disabled="@(!_isPlayerReady || !_isPlaying)">
                        <i class="bi bi-skip-forward-fill"></i>
                    </button>
                </div>

                <div class="volume-control">
                    <i class="bi bi-volume-down"></i>
                    <input type="range" min="0" max="100" @bind="_volumeLevel" @oninput="HandleVolumeChange" class="volume-slider"/>
                    <i class="bi bi-volume-up"></i>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool _isAuthenticated = false;
    private bool _isPlayerReady = false;
    private bool _isPlaying = false;
    private string _currentTrackName = "Not Playing";
    private string _currentTrackArtist = "No Artist";
    private string _currentTrackImageUrl = "";
    private int _volumeLevel = 50;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is authenticated
        var token = await SpotifyService.GetAccessTokenAsync();
        _isAuthenticated = !string.IsNullOrEmpty(token);

        if (_isAuthenticated)
        {
            await InitializePlayer();
            await FetchCurrentPlaybackState();
        }

        // Listen for Spotify authentication state changes
        SpotifyService.OnAuthStateChanged += HandleAuthStateChanged;
    }

    private async void HandleAuthStateChanged(bool isAuthenticated)
    {
        _isAuthenticated = isAuthenticated;

        if (isAuthenticated)
        {
            await InitializePlayer();
            await FetchCurrentPlaybackState();
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task InitializePlayer()
    {
        try
        {
            var token = await SpotifyService.GetAccessTokenAsync();
            if (!string.IsNullOrEmpty(token))
            {
                await JsRuntime.InvokeVoidAsync("spotifyPlayer.initialize", token, DotNetObjectReference.Create(this));
                _isPlayerReady = true;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error initializing player: {ex.Message}");
        }
    }

    private async Task FetchCurrentPlaybackState()
    {
        try
        {
            var playbackState = await SpotifyService.GetCurrentPlaybackStateAsync();

            if (playbackState != null)
            {
                _isPlaying = playbackState.IsPlaying;
                _currentTrackName = playbackState.TrackName;
                _currentTrackArtist = playbackState.ArtistName;
                _currentTrackImageUrl = playbackState.ImageUrl;
                StateHasChanged();
            }
            else
            {
                // Try to get recently played if no current playback
                var recentTrack = await SpotifyService.GetRecentlyPlayedTrackAsync();

                if (recentTrack != null)
                {
                    _isPlaying = false; // Recent track is not currently playing
                    _currentTrackName = recentTrack.TrackName;
                    _currentTrackArtist = recentTrack.ArtistName;
                    _currentTrackImageUrl = recentTrack.ImageUrl;
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching playback state: {ex.Message}");
        }
    }

    private async Task TogglePlayback()
    {
        if (!_isPlayerReady)
            return;

        try
        {
            if (_isPlaying)
            {
                await JsRuntime.InvokeVoidAsync("spotifyPlayer.pause");
                _isPlaying = false;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("spotifyPlayer.play");
                _isPlaying = true;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error toggling playback: {ex.Message}");
        }
    }

    private async Task PreviousTrack()
    {
        if (!_isPlayerReady || !_isPlaying)
            return;

        try
        {
            await JsRuntime.InvokeVoidAsync("spotifyPlayer.previousTrack");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error going to previous track: {ex.Message}");
        }
    }

    private async Task NextTrack()
    {
        if (!_isPlayerReady || !_isPlaying)
            return;

        try
        {
            await JsRuntime.InvokeVoidAsync("spotifyPlayer.nextTrack");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error going to next track: {ex.Message}");
        }
    }

    private async Task HandleVolumeChange(ChangeEventArgs e)
    {
        if (!_isPlayerReady || e.Value == null)
            return;

        try
        {
            if (int.TryParse(e.Value.ToString(), out int volume))
            {
                _volumeLevel = volume;
                await JsRuntime.InvokeVoidAsync("spotifyPlayer.setVolume", volume / 100.0);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error changing volume: {ex.Message}");
        }
    }

    [JSInvokable]
    public void OnPlaybackStateChanged(bool isPlaying, string trackName, string trackArtist, string imageUrl)
    {
        _isPlaying = isPlaying;
        _currentTrackName = string.IsNullOrEmpty(trackName) ? "Not Playing" : trackName;
        _currentTrackArtist = string.IsNullOrEmpty(trackArtist) ? "No Artist" : trackArtist;
        _currentTrackImageUrl = imageUrl;
        StateHasChanged();
    }

    private async Task AuthenticateWithSpotify()
    {
        try
        {
            // Configure auth service
            var redirectUri = NavigationManager.BaseUri.TrimEnd('/') + "/callback";
            SpotifyService.Configure("6bf1083c60b743a9841b7db2ca63117b", redirectUri);

            // Generate and navigate to auth URL
            var authUrl = await SpotifyService.GenerateAuthUrlAsync();
            NavigationManager.NavigateTo(authUrl);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Authentication error: {ex.Message}");
        }
    }

    public void Dispose()
    {
        // Unregister from auth events
        SpotifyService.OnAuthStateChanged -= HandleAuthStateChanged;
    }

}