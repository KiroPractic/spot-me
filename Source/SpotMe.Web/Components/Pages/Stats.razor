@page "/stats"
@using SpotMe.Web.Models
@using SpotMe.Web.Components.Shared
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Blazorise.Charts
@inject Services.StatsService StatsService
@inject IJSRuntime JsRuntime
@rendermode InteractiveServer

<div class="container stats-container">
    <h1>Stats</h1>

    @if (_isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (_stats == null)
    {
        <div class="alert alert-warning">No streaming history data found for the selected period.</div>
    }
    else
    {
        <div class="date-range-picker">
            <EditForm Model="Model" OnValidSubmit="LoadStats" FormName="DateRangeForm">
                <DataAnnotationsValidator />
                <div class="row g-3 align-items-end">
                    <div class="col-auto">
                        <label for="startDate" class="form-label">Start Date</label>
                        <InputDate id="startDate" class="form-control dark-input" @bind-Value="Model.StartDate"/>
                    </div>
                    <div class="col-auto">
                        <label for="endDate" class="form-label">End Date</label>
                        <InputDate id="endDate" class="form-control dark-input" @bind-Value="Model.EndDate"/>
                    </div>
                    <div class="col-auto preset-buttons">
                        <button type="button" class="btn btn-outline-secondary btn-sm me-2" @onclick="SetPresetLastMonth">
                            Last Month
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm me-2" @onclick="SetPresetLastYear">
                            Last Year
                        </button>
                        <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="SetPresetAllTime">
                            All Time
                        </button>
                    </div>
                    <div class="col-auto action-buttons">
                        <button type="submit" class="btn btn-primary btn-sm me-2">Apply</button>
                        <button type="button" class="btn btn-link btn-sm" @onclick="ResetDateRange">Reset</button>
                    </div>
                </div>
            </EditForm>
            <div class="mt-3 text-muted">
                Showing stats for:
                <span>@(GetRangeSummary())</span>
            </div>
        </div>
        <div class="row g-4 mb-4">
            <div class="col-md-6">
                <div class="card stat-card">
                    <div class="card-body">
                        <h5 class="card-title">Total Playtime</h5>
                        <p class="card-text display-6">@FormatMinutes(_stats.TotalMinutes)</p>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card stat-card">
                    <div class="card-body">
                        <h5 class="card-title">Total Plays</h5>
                        <p class="card-text display-6">@_stats.TotalTracks.ToString("N0")</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row g-4 mb-4">
            <div class="col-md-4">
                <div class="card stat-card">
                    <div class="card-body text-center">
                        <h6 class="card-title">Music</h6>
                        <p class="card-text h4">@FormatMinutes(_stats.ContentTypeBreakdown.AudioTrackMinutes)</p>
                        <small class="text-muted">@_stats.ContentTypeBreakdown.AudioTrackCount tracks</small>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card stat-card">
                    <div class="card-body text-center">
                        <h6 class="card-title">Podcasts</h6>
                        <p class="card-text h4">@FormatMinutes(_stats.ContentTypeBreakdown.PodcastMinutes)</p>
                        <small class="text-muted">@_stats.ContentTypeBreakdown.PodcastCount episodes</small>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card stat-card">
                    <div class="card-body text-center">
                        <h6 class="card-title">Other</h6>
                        <p class="card-text h4">@FormatMinutes(_stats.ContentTypeBreakdown.UnknownMinutes)</p>
                        <small class="text-muted">@_stats.ContentTypeBreakdown.UnknownCount items</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Overall Playback Behavior -->
        @if (_stats.PlaybackBehavior.ShufflePlays > 0 || _stats.PlaybackBehavior.SkippedPlays > 0 || _stats.PlaybackBehavior.OfflinePlays > 0)
        {
            <div class="row g-4 mb-4">
                <div class="col-md-3">
                    <div class="card stat-card">
                        <div class="card-body text-center">
                            <h6 class="card-title">Shuffle Plays</h6>
                            <p class="card-text h4">@_stats.PlaybackBehavior.ShufflePlays</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card">
                        <div class="card-body text-center">
                            <h6 class="card-title">Skipped</h6>
                            <p class="card-text h4">@_stats.PlaybackBehavior.SkippedPlays</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card">
                        <div class="card-body text-center">
                            <h6 class="card-title">Offline Plays</h6>
                            <p class="card-text h4">@_stats.PlaybackBehavior.OfflinePlays</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card stat-card">
                        <div class="card-body text-center">
                            <h6 class="card-title">Incognito</h6>
                            <p class="card-text h4">@_stats.PlaybackBehavior.IncognitoPlays</p>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- World Map Section -->
        @if (_stats?.CountryStats?.Any() == true)
        {
            <div class="row g-4 mb-4">
                <div class="col-12">
                    <WorldMap CountryData="@_stats.CountryStats"
                              Title="Listening Activity by Country"
                              Height="450"
                              ShowLegend="true" />
                </div>
            </div>
        }

        <!-- Overall Playback Completion Pie Chart -->
        <div class="row g-4 mb-4">
            <div class="col-md-6">
                <div class="card stat-card">
                    <div class="card-body">
                        <h6 class="card-title text-center">Overall Playback Completion</h6>
                        @if (_stats?.PlaybackBehavior?.CompletionStatusBreakdown?.Any() == true)
                        {
                            <div style="width: 100%; height: 350px; padding: 1rem;">
                                <PieChart @ref="_pieChart" TItem="int" Options="@_pieChartOptions" />
                            </div>
                        }
                        else
                        {
                            <div class="text-center">
                                <span>Loading chart...</span>
                            </div>
                        }

                    </div>
                </div>
            </div>
        </div>

        <!-- Music Section -->
        @if (_stats.MusicStats.TotalMusicTracks > 0)
        {
            <section class="media-section mb-5">
                <h2>Music Statistics</h2>
                <div class="row g-4 mb-4">
                    <div class="col-md-3">
                        <div class="card">
                            <div class="card-body text-center">
                                <h6 class="card-title">Playtime</h6>
                                <p class="card-text h4">@FormatMinutes(_stats.MusicStats.TotalMusicMinutes)</p>
                                <small class="text-muted">@_stats.MusicStats.TotalMusicTracks tracks</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card">
                            <div class="card-body text-center">
                                <h6 class="card-title">Artists</h6>
                                <p class="card-text h4">@_stats.MusicStats.UniqueMusicArtists.ToString("N0")</p>
                                <small class="text-muted">unique artists</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card">
                            <div class="card-body text-center">
                                <h6 class="card-title">Tracks</h6>
                                <p class="card-text h4">@_stats.MusicStats.UniqueMusicTracks.ToString("N0")</p>
                                <small class="text-muted">unique tracks</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card">
                            <div class="card-body text-center">
                                <h6 class="card-title">Albums</h6>
                                <p class="card-text h4">@_stats.MusicStats.UniqueMusicAlbums.ToString("N0")</p>
                                <small class="text-muted">unique albums</small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Top Music Artists -->
                <div class="mb-4">
                    <h3>Top Artists</h3>
                    <div class="table-responsive">
                        <table class="table table-dark table-striped align-middle">
                            <thead>
                            <tr>
                                <th>#</th>
                                <th>Artist</th>
                                <th>Play Count</th>
                                <th>Total Playtime</th>
                                <th>Unique Tracks</th>
                                <th>Unique Albums</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var artist in _stats.MusicStats.TopMusicArtists.Take(25).Select((a, i) => new { Artist = a, Index = i + 1 }))
                            {
                                <tr>
                                    <td>@artist.Index</td>
                                    <td>@artist.Artist.ArtistName</td>
                                    <td>@artist.Artist.PlayCount</td>
                                    <td>@FormatMinutes(artist.Artist.TotalMinutes)</td>
                                    <td>@artist.Artist.UniqueTracks</td>
                                    <td>@artist.Artist.UniqueAlbums</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Top Music Tracks -->
                <div class="mb-4">
                    <h3>Top Tracks</h3>
                    <div class="table-responsive">
                        <table class="table table-dark table-striped align-middle">
                            <thead>
                            <tr>
                                <th>#</th>
                                <th>Artist</th>
                                <th>Track</th>
                                <th>Album</th>
                                <th>Play Count</th>
                                <th>Total Playtime</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var track in _stats.MusicStats.TopMusicTracks.Take(25).Select((t, i) => new { Track = t, Index = i + 1 }))
                            {
                                <tr>
                                    <td>@track.Index</td>
                                    <td>@track.Track.ArtistName</td>
                                    <td>@track.Track.TrackName</td>
                                    <td>@(track.Track.AlbumName ?? "-")</td>
                                    <td>@track.Track.PlayCount</td>
                                    <td>@FormatMinutes(track.Track.TotalMinutes)</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Top Music Albums -->
                @if (_stats.MusicStats.TopMusicAlbums.Any())
                {
                    <div class="mb-4">
                        <h3>Top Albums</h3>
                        <div class="table-responsive">
                            <table class="table table-dark table-striped align-middle">
                                <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Artist</th>
                                    <th>Album</th>
                                    <th>Play Count</th>
                                    <th>Total Playtime</th>
                                    <th>Unique Tracks</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var album in _stats.MusicStats.TopMusicAlbums.Take(25).Select((a, i) => new { Album = a, Index = i + 1 }))
                                {
                                    <tr>
                                        <td>@album.Index</td>
                                        <td>@album.Album.ArtistName</td>
                                        <td>@album.Album.AlbumName</td>
                                        <td>@album.Album.PlayCount</td>
                                        <td>@FormatMinutes(album.Album.TotalMinutes)</td>
                                        <td>@album.Album.UniqueTracks</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }

                <!-- Most Skipped Music -->
                @if (_stats.MusicStats.TopSkippedMusicTracks.Any() || _stats.MusicStats.TopSkippedMusicArtists.Any())
                {
                    <div class="mb-4">
                        <h3>Most Skipped</h3>
                        <div class="row g-4">
                            <!-- Most Skipped Tracks -->
                            @if (_stats.MusicStats.TopSkippedMusicTracks.Any())
                            {
                                <div class="col-lg-6">
                                    <h4>Tracks</h4>
                                    <div class="table-responsive">
                                        <table class="table table-dark table-striped align-middle">
                                            <thead>
                                            <tr>
                                                <th>#</th>
                                                <th>Artist</th>
                                                <th>Track</th>
                                                <th>Skips</th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            @foreach (var track in _stats.MusicStats.TopSkippedMusicTracks.Take(10).Select((t, i) => new { Track = t, Index = i + 1 }))
                                            {
                                                <tr>
                                                    <td>@track.Index</td>
                                                    <td>@track.Track.ArtistName</td>
                                                    <td>@track.Track.TrackName</td>
                                                    <td>@track.Track.PlayCount</td>
                                                </tr>
                                            }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            }

                            <!-- Most Skipped Artists -->
                            @if (_stats.MusicStats.TopSkippedMusicArtists.Any())
                            {
                                <div class="col-lg-6">
                                    <h4>Artists</h4>
                                    <div class="table-responsive">
                                        <table class="table table-dark table-striped align-middle">
                                            <thead>
                                            <tr>
                                                <th>#</th>
                                                <th>Artist</th>
                                                <th>Skips</th>
                                                <th>Unique Tracks</th>
                                            </tr>
                                            </thead>
                                            <tbody>
                                            @foreach (var artist in _stats.MusicStats.TopSkippedMusicArtists.Take(10).Select((a, i) => new { Artist = a, Index = i + 1 }))
                                            {
                                                <tr>
                                                    <td>@artist.Index</td>
                                                    <td>@artist.Artist.ArtistName</td>
                                                    <td>@artist.Artist.PlayCount</td>
                                                    <td>@artist.Artist.UniqueTracks</td>
                                                </tr>
                                            }
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </section>
        }

        @if (_stats.TopPodcasts.Any())
        {
            <section class="top-podcasts-section mb-5">
                <h2>Top Podcasts</h2>
                <div class="table-responsive">
                    <table class="table table-dark table-striped align-middle">
                        <thead>
                        <tr>
                            <th>Show</th>
                            <th>Episode</th>
                            <th>Play Count</th>
                            <th>Total Playtime</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var podcast in _stats.TopPodcasts)
                        {
                            <tr>
                                <td>@podcast.ShowName</td>
                                <td>@podcast.EpisodeName</td>
                                <td>@podcast.PlayCount</td>
                                <td>@FormatMinutes(podcast.TotalMinutes)</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </section>
        }
    }
</div>

@code {
    [SupplyParameterFromForm]
    private DateRangeFormModel Model { get; set; } = new();

    public class DateRangeFormModel
    {
        public DateOnly? StartDate { get; set; }
        public DateOnly? EndDate { get; set; }
    }

    private StatsOverview? _stats;
    private bool _isLoading = true;
    private PieChart<int>? _pieChart;

    // Chart options - you can choose between these two configurations:

    // No legend - cleaner look with detailed tooltips
    private readonly PieChartOptions _pieChartOptions = new()
    {
        Responsive = true,
        MaintainAspectRatio = false,
        Layout = new ChartLayout
        {
            Padding = new ChartPadding
            {
                Left = 10,
                Right = 10,
                Top = 10,
                Bottom = 10
            }
        },
        Plugins = new ChartPlugins
        {
            Legend = new ChartLegend
            {
                Display = false
            },
            Tooltip = new ChartTooltip
            {
                Enabled = true,
                DisplayColors = true
            }
        }
    };
    
    protected override async Task OnInitializedAsync()
    {
        await LoadStats();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupPieChart();
        }
    }

    private async Task SetupPieChart()
    {
        if (_stats?.PlaybackBehavior.CompletionStatusBreakdown?.Any() == true && _pieChart != null)
        {
            await _pieChart.Clear();

            var data = new List<int>
            {
                _stats.PlaybackBehavior.CompletionStatusBreakdown.GetValueOrDefault(PlaybackCompletionStatus.Completed, 0),
                _stats.PlaybackBehavior.CompletionStatusBreakdown.GetValueOrDefault(PlaybackCompletionStatus.PartiallyCompleted, 0),
                _stats.PlaybackBehavior.CompletionStatusBreakdown.GetValueOrDefault(PlaybackCompletionStatus.BarelyPlayed, 0),
                _stats.PlaybackBehavior.CompletionStatusBreakdown.GetValueOrDefault(PlaybackCompletionStatus.Skipped, 0)
            };

            // Calculate total for percentage calculation
            var total = data.Sum();

            // Create labels with percentages
            var labels = new List<string>();
            var baseLabels = new[] { "Completed", "Partially Completed", "Barely Played", "Skipped" };

            for (int i = 0; i < baseLabels.Length; i++)
            {
                var count = data[i];
                var percentage = total > 0 ? (count * 100.0 / total) : 0;
                labels.Add($"{baseLabels[i]} ({percentage:F1}%)");
            }

            var dataset = new PieChartDataset<int>
            {
                Label = "Playback Completion",
                Data = data,
                BackgroundColor = new List<string>
                {
                    "#1DB954",  // Completed - Spotify Green
                    "#1ed760",  // Partially Completed - Light Green
                    "#b3b3b3",  // Barely Played - Light Gray
                    "#666666"   // Skipped - Dark Gray
                },
                BorderColor = new List<string> { "#121212", "#121212", "#121212", "#121212" },
                BorderWidth = 2
            };

            await _pieChart.AddLabelsDatasetsAndUpdate(labels, dataset);
        }
    }

    private async Task LoadStats()
    {
        _isLoading = true;
        StateHasChanged();
        _stats = await StatsService.GetStatsOverviewAsync(Model.StartDate, Model.EndDate);
        _isLoading = false;
        StateHasChanged();
        await SetupPieChart();
    }

    private async Task ResetDateRange()
    {
        Model.StartDate = null;
        Model.EndDate = null;
        StateHasChanged();
        await LoadStats();
    }

    private async Task SetPresetLastMonth()
    {
        var now = DateTime.Now;
        var firstOfThisMonth = new DateTime(now.Year, now.Month, 1);
        var firstOfLastMonth = firstOfThisMonth.AddMonths(-1);
        Model.StartDate = DateOnly.FromDateTime(firstOfLastMonth);
        Model.EndDate = DateOnly.FromDateTime(firstOfThisMonth.AddDays(-1));
        StateHasChanged();
        await LoadStats();
    }

    private async Task SetPresetLastYear()
    {
        var now = DateTime.Now;
        var start = new DateTime(now.Year - 1, 1, 1);
        var end = new DateTime(now.Year - 1, 12, 31);
        Model.StartDate = DateOnly.FromDateTime(start);
        Model.EndDate = DateOnly.FromDateTime(end);
        StateHasChanged();
        await LoadStats();
    }

    private void SetPresetAllTime()
    {
        Model.StartDate = null;
        Model.EndDate = null;
        StateHasChanged();
        _ = LoadStats();
    }

    private string GetRangeSummary()
    {
        if (Model.StartDate != null && Model.EndDate != null)
            return $"{Model.StartDate:yyyy-MM-dd} to {Model.EndDate:yyyy-MM-dd}";
        if (Model.StartDate != null)
            return $"from {Model.StartDate:yyyy-MM-dd}";
        if (Model.EndDate != null)
            return $"until {Model.EndDate:yyyy-MM-dd}";
        return "all time";
    }

    private string FormatMinutes(double totalMinutes)
    {
        int days = (int)(totalMinutes / 1440);
        int hours = (int)((totalMinutes % 1440) / 60);
        int minutes = (int)(totalMinutes % 60);
        var parts = new List<string>();
        if (days > 0) parts.Add($"{days}d");
        if (hours > 0) parts.Add($"{hours}h");
        if (minutes > 0 || parts.Count == 0) parts.Add($"{minutes}m");
        return string.Join(" ", parts);
    }
}