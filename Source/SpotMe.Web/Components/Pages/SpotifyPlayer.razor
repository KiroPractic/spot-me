@page "/spotify-player"
@using SpotMe.Web.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject SpotifyAuthService AuthService
@inject SpotifyPlayerService PlayerService
@implements IAsyncDisposable

<h1>Spotify Player</h1>

@if (!_isAuthenticated)
{
    <div class="auth-section">
        <h3>Authentication Required</h3>
        <p>You need to authenticate with Spotify to use the player.</p>
        <button class="btn btn-success" @onclick="Authenticate">Connect to Spotify</button>
    </div>
}
else
{
    @if (!_playerInitialized)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Initializing Spotify player...</p>
    }
    else
    {
        <div class="player-container">
            <div class="track-info">
                @if (_currentTrack != null)
                {
                    <div class="album-art">
                        @if (_currentTrack.Album?.Images != null && _currentTrack.Album.Images.Count > 0)
                        {
                            <img src="@_currentTrack.Album.Images[0].Url" alt="Album Art" />
                        }
                        else
                        {
                            <div class="no-art">No Album Art</div>
                        }
                    </div>
                    <div class="track-details">
                        <h3>@_currentTrack.Name</h3>
                        @if (_currentTrack.Artists != null && _currentTrack.Artists.Count > 0)
                        {
                            <p>@string.Join(", ", _currentTrack.Artists.Select(a => a.Name))</p>
                        }
                        <p>@_currentTrack.Album?.Name</p>
                    </div>
                }
                else
                {
                    <div class="no-track">
                        <p>No track is currently playing</p>
                    </div>
                }
            </div>

            <div class="progress-bar">
                <span>@FormatTime(_position)</span>
                <div class="progress">
                    <div class="progress-bar bg-success" 
                         role="progressbar" 
                         style="width: @(_duration > 0 ? (float)_position / _duration * 100 : 0)%">
                    </div>
                </div>
                <span>@FormatTime(_duration)</span>
            </div>

            <div class="controls">
                <button class="btn btn-secondary" @onclick="PreviousTrack">
                    <i class="bi bi-skip-backward-fill"></i>
                </button>
                <button class="btn @(_isPaused ? "btn-success" : "btn-warning")" @onclick="TogglePlay">
                    <i class="bi @(_isPaused ? "bi-play-fill" : "bi-pause-fill")"></i>
                </button>
                <button class="btn btn-secondary" @onclick="NextTrack">
                    <i class="bi bi-skip-forward-fill"></i>
                </button>
            </div>

            <div class="volume-control">
                <i class="bi bi-volume-down"></i>
                <input type="range" class="form-range" min="0" max="1" step="0.01" 
                       value="@_volume" @onchange="OnVolumeChange" />
                <i class="bi bi-volume-up"></i>
            </div>
        </div>

        <div class="search-section mt-4">
            <h3>Play a Track</h3>
            <div class="input-group">
                <input type="text" class="form-control" 
                       placeholder="Enter Spotify URI (spotify:track:xxx)" 
                       @bind="_trackUri" />
                <button class="btn btn-primary" @onclick="PlayTrack">Play</button>
            </div>
            <small class="text-muted">
                Example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh
            </small>
        </div>
    }
}

@if (_error != null)
{
    <div class="alert alert-danger mt-3">
        @_error
    </div>
}

@code {
    private bool _isAuthenticated = false;
    private bool _playerInitialized = false;
    private Track? _currentTrack;
    private int _position = 0;
    private int _duration = 0;
    private bool _isPaused = true;
    private double _volume = 0.5;
    private string? _trackUri;
    private string? _error;
    private System.Threading.Timer? _stateTimer;

    protected override async Task OnInitializedAsync()
    {
        // Configure the auth service
        AuthService.Configure(
            "YOUR_SPOTIFY_CLIENT_ID",  // Replace with your actual client ID
            NavigationManager.BaseUri + "spotify-player");

        // Try to get an existing token
        var token = await AuthService.GetAccessTokenAsync();
        _isAuthenticated = !string.IsNullOrEmpty(token);

        // Handle redirect if needed
        if (!_isAuthenticated)
        {
            var success = await AuthService.HandleRedirectAsync();
            if (success)
            {
                token = await AuthService.GetAccessTokenAsync();
                _isAuthenticated = !string.IsNullOrEmpty(token);
            }
        }

        // Initialize player if authenticated
        if (_isAuthenticated && token != null)
        {
            try
            {
                await InitializePlayerAsync(token);
            }
            catch (Exception ex)
            {
                _error = $"Error initializing player: {ex.Message}";
            }
        }
    }

    private async Task Authenticate()
    {
        var authUrl = AuthService.GenerateAuthUrl();
        NavigationManager.NavigateTo(authUrl);
    }

    private async Task InitializePlayerAsync(string token)
    {
        try
        {
            // Subscribe to events
            PlayerService.OnPlayerReady += (deviceId) => 
            {
                _playerInitialized = true;
                StateHasChanged();
            };

            PlayerService.OnPlayerError += (error) => 
            {
                _error = error;
                StateHasChanged();
            };

            // Initialize player
            await PlayerService.InitializeAsync(token);

            // Start polling for player state
            _stateTimer = new System.Threading.Timer(
                async _ => await PollPlayerStateAsync(),
                null, 
                TimeSpan.Zero, 
                TimeSpan.FromMilliseconds(1000));
        }
        catch (Exception ex)
        {
            _error = $"Failed to initialize player: {ex.Message}";
        }
    }

    private async Task PollPlayerStateAsync()
    {
        try
        {
            var state = await PlayerService.GetPlayerStateAsync();
            if (state != null)
            {
                _isPaused = state.Paused;
                _position = state.Position;
                _duration = state.Duration;
                _currentTrack = state.TrackWindow?.CurrentTrack;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            _error = $"Error updating player state: {ex.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task TogglePlay()
    {
        try
        {
            await PlayerService.TogglePlayAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error toggling playback: {ex.Message}";
        }
    }

    private async Task PreviousTrack()
    {
        try
        {
            await PlayerService.PreviousTrackAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error skipping to previous track: {ex.Message}";
        }
    }

    private async Task NextTrack()
    {
        try
        {
            await PlayerService.NextTrackAsync();
        }
        catch (Exception ex)
        {
            _error = $"Error skipping to next track: {ex.Message}";
        }
    }

    private async Task PlayTrack()
    {
        if (string.IsNullOrEmpty(_trackUri))
        {
            _error = "Please enter a Spotify track URI";
            return;
        }

        try
        {
            await PlayerService.PlayAsync(_trackUri);
        }
        catch (Exception ex)
        {
            _error = $"Error playing track: {ex.Message}";
        }
    }

    private async Task OnVolumeChange(ChangeEventArgs e)
    {
        if (e.Value != null && double.TryParse(e.Value.ToString(), out var value))
        {
            _volume = value;
            await PlayerService.SetVolumeAsync(_volume);
        }
    }

    private string FormatTime(int ms)
    {
        var timeSpan = TimeSpan.FromMilliseconds(ms);
        return $"{(int)timeSpan.TotalMinutes}:{timeSpan.Seconds:D2}";
    }

    public async ValueTask DisposeAsync()
    {
        _stateTimer?.Dispose();
        await PlayerService.DisconnectAsync();
    }
}

<style>
    .player-container {
        max-width: 500px;
        margin: 0 auto;
    }

    .track-info {
        display: flex;
        margin-bottom: 20px;
    }

    .album-art {
        width: 150px;
        height: 150px;
        flex-shrink: 0;
        margin-right: 20px;
        background-color: #ddd;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .album-art img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .no-art {
        color: #666;
    }

    .track-details {
        flex-grow: 1;
    }

    .progress-bar {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .progress {
        flex-grow: 1;
    }

    .controls {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .volume-control {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .search-section {
        border-top: 1px solid #ddd;
        padding-top: 20px;
    }

    .no-track {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 150px;
        background-color: #f5f5f5;
        color: #666;
    }
</style>